generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  role         String
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
}

model student {
  id                Int       @id @default(autoincrement())
  first_name        String
  last_name         String
  birth_date        DateTime
  gender            String
  address           String
  postal_code       String
  city              String
  phone             String
  parent_name       String
  parent_email      String
  lesson_package    String
  enrollment_status Boolean   @default(true)

  class_layout      class_layout? @relation(fields: [class_id], references: [id])
  class_id          Int?

  progress          progress[]
  absences          absence[]
  payments          tuition_payment[]
  results           result[]
}

model teacher {
  id            Int      @id @default(autoincrement())
  first_name    String
  last_name     String
  email         String
  phone         String
  address       String
  is_active     Boolean  @default(true)
  compensation  Float?
  cv_url        String?
  vog_url       String?
  id_document   String?

  absences      absence[]
}

model admin {
  id            Int      @id @default(autoincrement())
  first_name    String
  last_name     String
  email         String
  phone         String
  address       String
  is_active     Boolean  @default(true)
}

model class_layout {
  id         Int       @id @default(autoincrement())
  name       String
  students   student[]
  tests      test[]
  exams      exam[]
  schedules  schedule[]
}

model subject {
  id        Int      @id @default(autoincrement())
  name      String
  level     String?

  tests     test[]
  exams     exam[]
}

model progress {
  id           Int      @id @default(autoincrement())
  student      student  @relation(fields: [student_id], references: [id])
  student_id   Int
  subject_id   Int
  date         DateTime
  start_verse  String
  end_verse    String
  completed    Boolean
  notes        String?
}

model absence {
  id          Int      @id @default(autoincrement())
  student     student? @relation(fields: [student_id], references: [id])
  student_id  Int?
  teacher     teacher? @relation(fields: [teacher_id], references: [id])
  teacher_id  Int?
  date        DateTime
  reason      String
}

model test {
  id           Int         @id @default(autoincrement())
  class_layout class_layout @relation(fields: [class_id], references: [id])
  class_id     Int
  subject      subject      @relation(fields: [subject_id], references: [id])
  subject_id   Int
  date         DateTime
  description  String?
}

model exam {
  id           Int         @id @default(autoincrement())
  class_layout class_layout @relation(fields: [class_id], references: [id])
  class_id     Int
  subject      subject      @relation(fields: [subject_id], references: [id])
  subject_id   Int
  date         DateTime
  is_central   Boolean
}

model result {
  id          Int      @id @default(autoincrement())
  student     student  @relation(fields: [student_id], references: [id])
  student_id  Int
  subject_id  Int
  grade       Float
  date        DateTime
}

model schedule {
  id           Int         @id @default(autoincrement())
  class_layout class_layout @relation(fields: [class_id], references: [id])
  class_id     Int
  day          String
  start_time   String
  end_time     String
  classroom    String
}

model tuition_payment {
  id          Int      @id @default(autoincrement())
  student     student  @relation(fields: [student_id], references: [id])
  student_id  Int

  course      courses  @relation(fields: [course_id], references: [id])
  course_id   Int

  amount      Float
  date        DateTime
  status      String
  notes       String?
}

model book_inventory {
  id        Int    @id @default(autoincrement())
  name      String
  stock     Int
  price     Int
}

model courses {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  price           Float

  tuition_payments tuition_payment[]
}